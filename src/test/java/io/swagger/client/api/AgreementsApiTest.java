/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiException;
import io.swagger.client.model.agreements.AgreementCreationInfo;
import io.swagger.client.model.agreements.AgreementCreationResponse;
import io.swagger.client.model.agreements.AgreementDocumentImageUrlsInfo;
import io.swagger.client.model.agreements.AgreementDocuments;
import io.swagger.client.model.agreements.AgreementEventList;
import io.swagger.client.model.agreements.AgreementFormFields;
import io.swagger.client.model.agreements.AgreementInfo;
import io.swagger.client.model.agreements.AgreementRejectionInfo;
import io.swagger.client.model.agreements.AgreementStateInfo;
import io.swagger.client.model.agreements.AgreementViewInfo;
import io.swagger.client.model.agreements.AgreementViews;
import io.swagger.client.model.agreements.CombinedDocumentPagesInfo;
import io.swagger.client.model.agreements.DelegatedParticipantSetInfo;
import io.swagger.client.model.agreements.DelegationResponse;
import io.swagger.client.model.agreements.DetailedParticipantSetInfo;
import io.swagger.client.model.agreements.DocumentUrl;
import io.swagger.client.model.agreements.DocumentsImageUrlsInfo;
import io.swagger.client.model.agreements.FetchedAgreementInfo;
import io.swagger.client.model.agreements.FormFieldMergeInfo;
import io.swagger.client.model.agreements.FormFieldPostInfo;
import io.swagger.client.model.agreements.FormFieldPutInfo;
import io.swagger.client.model.agreements.MembersInfo;
import io.swagger.client.model.agreements.MyAgreementInfo;
import io.swagger.client.model.agreements.Note;
import io.swagger.client.model.agreements.ParticipantSecurityOption;
import io.swagger.client.model.agreements.ReminderCreationResult;
import io.swagger.client.model.agreements.ReminderInfo;
import io.swagger.client.model.agreements.RemindersResponse;
import io.swagger.client.model.agreements.ShareCreationInfoList;
import io.swagger.client.model.agreements.ShareCreationResponseList;
import io.swagger.client.model.agreements.SignerIdentityReportInfo;
import io.swagger.client.model.agreements.SigningUrlResponse;
import io.swagger.client.model.agreements.UserAgreements;
import io.swagger.client.model.agreements.VaultEventInfo;
import io.swagger.client.model.agreements.VisibilityInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AgreementsApi
 */
@Ignore
public class AgreementsApiTest {

    private final AgreementsApi api = new AgreementsApi();

    
    /**
     * Adds template fields to an agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addTemplateFieldsToAgreementTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        FormFieldPostInfo formFieldPostInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        AgreementFormFields response = api.addTemplateFieldsToAgreement(authorization, agreementId, formFieldPostInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Creates an agreement. Sends it out for signatures, and returns the agreementID in the response to the client.
     *
     * This is a primary endpoint which is used to create a new agreement. An agreement can be created using transientDocument, libraryDocument or a URL. You can create an agreement in one of the 3 mentioned states: a) &lt;b&gt;DRAFT&lt;/b&gt; - to incrementally build the agreement before sending out, b) &lt;b&gt;AUTHORING&lt;/b&gt; - to add/edit form fields in the agreement, c) &lt;b&gt;IN_PROCESS&lt;/b&gt; - to immediately send the agreement. You can use the PUT /agreements/{agreementId}/state endpoint to transition an agreement between the above mentioned states. An allowed transition would follow the following sequence: DRAFT -&gt; AUTHORING -&gt; IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAgreementTest() throws ApiException {
        String authorization = null;
        AgreementCreationInfo agreementInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        AgreementCreationResponse response = api.createAgreement(authorization, agreementInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest state view url of agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAgreementViewTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        AgreementViewInfo agreementViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        AgreementViews response = api.createAgreementView(authorization, agreementId, agreementViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Creates a participantSet to which the agreement is forwarded for takingÂ appropriate action.
     *
     * Participants marked as delegator can call this API endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDelegatedParticipantSetsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        DelegatedParticipantSetInfo delegatedParticipantSetInfo = null;
        String xApiUser = null;
        DelegationResponse response = api.createDelegatedParticipantSets(authorization, agreementId, participantSetId, delegatedParticipantSetInfo, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Creates a reminder on the specified participants of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReminderOnParticipantTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderCreationResult response = api.createReminderOnParticipant(authorization, agreementId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Share an agreement with someone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShareOnAgreementTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        ShareCreationInfoList shareCreationInfoList = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ShareCreationResponseList response = api.createShareOnAgreement(authorization, agreementId, shareCreationInfoList, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the signer identity report of an agreement identified by agreementId.
     *
     * PDF file stream containing signer identify information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSignerIdentityReportTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        SignerIdentityReportInfo signerIdentityReportInfo = null;
        byte[] response = api.createSignerIdentityReport(authorization, agreementId, xApiUser, signerIdentityReportInfo);

        // TODO: test validations
    }
    
    /**
     * Deletes all the documents of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDocumentsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.deleteDocuments(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the current status of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        FetchedAgreementInfo response = api.getAgreementInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the agreement information related to the api caller
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementInfoForUserTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        MyAgreementInfo response = api.getAgreementInfoForUser(authorization, agreementId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getAgreementNoteForApiUser(authorization, agreementId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves a specific reminder associated with an agreement
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementReminderTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String reminderId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderInfo response = api.getAgreementReminder(authorization, agreementId, reminderId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the reminders of an agreement, identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementRemindersTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String status = null;
        RemindersResponse response = api.getAgreementReminders(authorization, agreementId, xApiUser, xOnBehalfOfUser, status);

        // TODO: test validations
    }
    
    /**
     * Retrieves the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        String ifNoneMatch = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ParticipantSecurityOption response = api.getAgreementSecurityOptionsForParticipation(authorization, agreementId, participantSetId, participantId, ifNoneMatch, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves agreements for the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAgreementsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String externalId = null;
        String groupId = null;
        Boolean showHiddenAgreements = null;
        String cursor = null;
        Integer pageSize = null;
        UserAgreements response = api.getAgreements(authorization, xApiUser, xOnBehalfOfUser, externalId, groupId, showHiddenAgreements, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents of an agreement identified by agreementId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        String supportingDocumentContentFormat = null;
        AgreementDocuments response = api.getAllDocuments(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, supportingDocumentContentFormat);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of all the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllDocumentsImageUrlsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String versionId = null;
        String participantId = null;
        String imageSizes = null;
        Boolean includeSupportingDocumentsImageUrls = null;
        Boolean showImageAvailabilityOnly = null;
        DocumentsImageUrlsInfo response = api.getAllDocumentsImageUrls(authorization, agreementId, xApiUser, xOnBehalfOfUser, versionId, participantId, imageSizes, includeSupportingDocumentsImageUrls, showImageAvailabilityOnly);

        // TODO: test validations
    }
    
    /**
     * Retrieves information of members of the agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllMembersTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean includeNextParticipantSet = null;
        MembersInfo response = api.getAllMembers(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, includeNextParticipantSet);

        // TODO: test validations
    }
    
    /**
     * Retrieves the audit trail of an agreement identified by agreementId.
     *
     * PDF file stream containing audit trail information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuditTrailTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getAuditTrail(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single combined PDF document for the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        Boolean attachSupportingDocuments = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getCombinedDocument(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, attachSupportingDocuments, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves info of all pages of a combined PDF document for the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentPagesInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean includeSupportingDocumentsPagesInfo = null;
        CombinedDocumentPagesInfo response = api.getCombinedDocumentPagesInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, includeSupportingDocumentsPagesInfo);

        // TODO: test validations
    }
    
    /**
     * Retrieves url of all visible pages of all the documents associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentUrlTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String versionId = null;
        String participantId = null;
        Boolean attachSupportingDocuments = null;
        Boolean attachAuditReport = null;
        DocumentUrl response = api.getCombinedDocumentUrl(authorization, agreementId, xApiUser, xOnBehalfOfUser, versionId, participantId, attachSupportingDocuments, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getDocument(authorization, agreementId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentImageUrlsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String imageSizes = null;
        Boolean showImageAvailabilityOnly = null;
        Integer startPage = null;
        Integer endPage = null;
        AgreementDocumentImageUrlsInfo response = api.getDocumentImageUrls(authorization, agreementId, documentId, xApiUser, xOnBehalfOfUser, imageSizes, showImageAvailabilityOnly, startPage, endPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        AgreementEventList response = api.getEvents(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered into the interactive form fields of the agreement.
     *
     * This API can only be called by the creator of the agreement
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormDataTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getFormData(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves details of form fields of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormFieldsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String participantEmail = null;
        AgreementFormFields response = api.getFormFields(authorization, agreementId, xApiUser, xOnBehalfOfUser, ifNoneMatch, participantEmail);

        // TODO: test validations
    }
    
    /**
     * Retrieves the merge info stored with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMergeInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        FormFieldMergeInfo response = api.getMergeInfo(authorization, agreementId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the participant set of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantSetTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        DetailedParticipantSetInfo response = api.getParticipantSet(authorization, agreementId, participantSetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the URL for the e-sign page for the current signer(s) of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSigningUrlTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String xApiUser = null;
        String ifNoneMatch = null;
        Integer expiry = null;
        SigningUrlResponse response = api.getSigningUrl(authorization, agreementId, xApiUser, ifNoneMatch, expiry);

        // TODO: test validations
    }
    
    /**
     * Rejects the agreement for a participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rejectAgreementForParticipationTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        AgreementRejectionInfo agreementRejectionInfo = null;
        String ifMatch = null;
        String xApiUser = null;
        api.rejectAgreementForParticipation(authorization, agreementId, participantSetId, participantId, agreementRejectionInfo, ifMatch, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Updates the agreement in draft state, or update the expirationTime on an existing agreement that is already out for signature.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        AgreementInfo agreementInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateAgreement(authorization, agreementId, agreementInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Set the merge info for an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementMergeInfoTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        FormFieldMergeInfo formFieldMergeInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateAgreementMergeInfo(authorization, agreementId, formFieldMergeInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note associated with an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementNoteForApiUser(authorization, agreementId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates an existing reminder for an agreement
     *
     * You can only update an ACTIVE reminder, and can only update the status to &#39;CANCELED&#39;, update reminderParticipantIds, or update note.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementReminderTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String reminderId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementReminder(authorization, agreementId, reminderId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        String participantId = null;
        ParticipantSecurityOption participantSecurityOption = null;
        String ifMatch = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementSecurityOptionsForParticipation(authorization, agreementId, participantSetId, participantId, participantSecurityOption, ifMatch, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the state of an agreement identified by agreementId in the path.
     *
     * This endpoint can be used by originator/sender of an agreement to transition between the states of agreement. An allowed transition would follow the following sequence: DRAFT -&gt; AUTHORING -&gt; IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementStateTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        AgreementStateInfo agreementStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateAgreementState(authorization, agreementId, agreementStateInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Complete the vaulting process and update the agreement as vaulted.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementVaultedTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        VaultEventInfo vaultEventInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementVaulted(authorization, agreementId, vaultEventInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of an agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAgreementVisibilityTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateAgreementVisibility(authorization, agreementId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates form fields of an agreement.  This will replace all fields in AUTHORING mode agreements, and will replace all fields except for text tag generated fields in DRAFT mode agreements.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFormFieldsTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        FormFieldPutInfo formFieldPutInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        AgreementFormFields response = api.updateFormFields(authorization, agreementId, formFieldPutInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the participant set of an agreement identified by agreementId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateParticipantSetTest() throws ApiException {
        String authorization = null;
        String agreementId = null;
        String participantSetId = null;
        DetailedParticipantSetInfo detailedParticipantSetInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateParticipantSet(authorization, agreementId, participantSetId, detailedParticipantSetInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
}

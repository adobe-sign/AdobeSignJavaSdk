/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiException;
import io.swagger.client.model.webhooks.UserWebhooks;
import io.swagger.client.model.webhooks.WebhookCreationResponse;
import io.swagger.client.model.webhooks.WebhookInfo;
import io.swagger.client.model.webhooks.WebhookStateInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Ignore
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    
    /**
     * Creates a webhook.
     *
     * This is a primary endpoint which is used to create a new webhook. A webhook can only be created in ACTIVE state. Currently, webhooks are supported at four scopes - Account, Group, User and Resource. &lt;br/&gt; &lt;br/&gt; Before creating a webhook successfully at any of these scopes, Adobe Sign &lt;a href&#x3D;&#39;https://www.adobe.io/apis/documentcloud/sign/docs.html#!adobedocs/adobe-sign/master/webhooks.md#verificationofintentofthewebhookurl&#39;&gt;verifies&lt;/a&gt; that the webhook URL that is provided in the registration request really intends to receive notifications and is a valid URL. &lt;br/&gt;There is a defined mechanism for this validation where Adobe Sign makes an HTTPS GET request to the webhook URL. This request has a custom HTTP header X-AdobeSign-ClientId. The value of this header is the client ID of the application that is requesting to create the webhook. To register a webhook successfully, the webhook URL must respond to this verification request with an HTTPS 2XX response code, and also it must send back the same client ID value in one of the following two ways:&lt;ol&gt;&lt;li&gt;In a custom response header, X-AdobeSign-ClientId. This is the same header which was passed in the request, and can be echoed back in the response.&lt;/li&gt;&lt;li&gt; In the JSON response body of the response with the key of xAdobeSignClientId and its value being the same client ID that was sent in the request. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;On successful registration,  Adobe Sign sends a success response (any HTTPS 2XX code) to your client app with the unique webhook identifier and a Location header, which contains the URL of the webhook resource created in Adobe Sign.&lt;br/&gt; To learn more, please refer &lt;a href&#x3D;&#39;https://www.adobe.io/apis/documentcloud/sign/docs.html#!adobedocs/adobe-sign/master/webhooks.md&#39;&gt;Webhooks in Adobe Sign Guide&lt;/a&gt;.&lt;/p&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        String authorization = null;
        WebhookInfo webhookInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        WebhookCreationResponse response = api.createWebhook(authorization, webhookInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Deletes a webhook.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        String authorization = null;
        String webhookId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.deleteWebhook(authorization, webhookId, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the details of a webhook.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookInfoTest() throws ApiException {
        String authorization = null;
        String webhookId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        WebhookInfo response = api.getWebhookInfo(authorization, webhookId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves webhooks for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean showInActiveWebhooks = null;
        String scope = null;
        String resourceType = null;
        String cursor = null;
        Integer pageSize = null;
        UserWebhooks response = api.getWebhooks(authorization, xApiUser, xOnBehalfOfUser, showInActiveWebhooks, scope, resourceType, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Updates a webhook.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        String authorization = null;
        String webhookId = null;
        WebhookInfo webhookInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateWebhook(authorization, webhookId, webhookInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the state of a webhook identified by webhookId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebhookStateTest() throws ApiException {
        String authorization = null;
        String webhookId = null;
        WebhookStateInfo webhookStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateWebhookState(authorization, webhookId, webhookStateInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
}

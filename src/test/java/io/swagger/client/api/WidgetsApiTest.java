/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiException;
import io.swagger.client.model.widgets.BasicDocumentsImageUrlsInfo;
import io.swagger.client.model.widgets.DetailedWidgetParticipantSetInfo;
import io.swagger.client.model.widgets.DocumentUrl;
import io.swagger.client.model.widgets.FetchedWidgetInfo;
import io.swagger.client.model.widgets.MyAgreementInfo;
import io.swagger.client.model.widgets.Note;
import io.swagger.client.model.widgets.ParticipantSecurityOption;
import io.swagger.client.model.widgets.ShareCreationInfoList;
import io.swagger.client.model.widgets.ShareCreationResponseList;
import io.swagger.client.model.widgets.UserWidgets;
import io.swagger.client.model.widgets.VisibilityInfo;
import io.swagger.client.model.widgets.WidgetAgreements;
import io.swagger.client.model.widgets.WidgetCreationInfoV6;
import io.swagger.client.model.widgets.WidgetCreationResponse;
import io.swagger.client.model.widgets.WidgetDocuments;
import io.swagger.client.model.widgets.WidgetEventList;
import io.swagger.client.model.widgets.WidgetInfo;
import io.swagger.client.model.widgets.WidgetMembersInfo;
import io.swagger.client.model.widgets.WidgetStateInfo;
import io.swagger.client.model.widgets.WidgetViewInfo;
import io.swagger.client.model.widgets.WidgetViews;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WidgetsApi
 */
@Ignore
public class WidgetsApiTest {

    private final WidgetsApi api = new WidgetsApi();

    
    /**
     * Share a web form with someone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShareOnWidgetTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        ShareCreationInfoList shareCreationInfoList = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ShareCreationResponseList response = api.createShareOnWidget(authorization, widgetId, shareCreationInfoList, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Creates a web form and and returns the widgetId in the response to the client.
     *
     * This is a primary endpoint which is used to create a new web form. You can create a web form in one of the 3 mentioned states: a) &lt;b&gt;DRAFT&lt;/b&gt; - to incrementally build the web form, b) &lt;b&gt;AUTHORING&lt;/b&gt; - to add/edit form fields in the web form, c) &lt;b&gt;ACTIVE&lt;/b&gt; - to immediately host the web form. You can use the PUT /widgets/{widgetId}/state endpoint to transition a web form between the above mentioned states. An allowed transition would follow the any of the following sequences: DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWidgetTest() throws ApiException {
        String authorization = null;
        WidgetCreationInfoV6 widgetInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        WidgetCreationResponse response = api.createWidget(authorization, widgetInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves detailed member info along with IDs for different types of participants.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWidgetMembersTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        WidgetMembersInfo response = api.getAllWidgetMembers(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        WidgetEventList response = api.getEvents(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the participant set of a web form identified by widgetId in the path.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getParticipantSetTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String participantSetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        DetailedWidgetParticipantSetInfo response = api.getParticipantSet(authorization, widgetId, participantSetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves agreements for the web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetAgreementsTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean showHiddenAgreements = null;
        String cursor = null;
        Integer pageSize = null;
        WidgetAgreements response = api.getWidgetAgreements(authorization, widgetId, xApiUser, xOnBehalfOfUser, showHiddenAgreements, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetAllDocumentsImageUrlsTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String imageSizes = null;
        Boolean showImageAvailabilityOnly = null;
        BasicDocumentsImageUrlsInfo response = api.getWidgetAllDocumentsImageUrls(authorization, widgetId, xApiUser, xOnBehalfOfUser, imageSizes, showImageAvailabilityOnly);

        // TODO: test validations
    }
    
    /**
     * Retrieves the audit trail of a web form identified by widgetId.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetAuditTrailTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getWidgetAuditTrail(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single combined PDF document for the documents associated with a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getWidgetCombinedDocument(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves url of all visible pages of all the documents associated with a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetCombinedDocumentUrlTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean attachAuditReport = null;
        DocumentUrl response = api.getWidgetCombinedDocumentUrl(authorization, widgetId, xApiUser, xOnBehalfOfUser, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetDocumentInfoTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getWidgetDocumentInfo(authorization, widgetId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents associated with web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetDocumentsTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        String participantId = null;
        WidgetDocuments response = api.getWidgetDocuments(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId, participantId);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered by the user into interactive form fields at the time they signed the web form
     *
     * CSV file stream containing form data information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetFormDataTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        byte[] response = api.getWidgetFormData(authorization, widgetId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the details of a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetInfoTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        FetchedWidgetInfo response = api.getWidgetInfo(authorization, widgetId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the web form information related to the api caller
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetInfoForUserTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        MyAgreementInfo response = api.getWidgetInfoForUser(authorization, widgetId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note of a web form for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getWidgetNoteForApiUser(authorization, widgetId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String participantSetId = null;
        String participantId = null;
        String ifNoneMatch = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ParticipantSecurityOption response = api.getWidgetSecurityOptionsForParticipation(authorization, widgetId, participantSetId, participantId, ifNoneMatch, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the requested views for a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetViewTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        WidgetViewInfo widgetViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        WidgetViews response = api.getWidgetView(authorization, widgetId, widgetViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves web forms for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWidgetsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String groupId = null;
        Boolean showHiddenWidgets = null;
        String cursor = null;
        Integer pageSize = null;
        UserWidgets response = api.getWidgets(authorization, xApiUser, xOnBehalfOfUser, groupId, showHiddenWidgets, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Updates a web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        WidgetInfo widgetInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateWidget(authorization, widgetId, widgetInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note of a web form for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateWidgetNoteForApiUser(authorization, widgetId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the security options for a particular participant.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetSecurityOptionsForParticipationTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        String participantSetId = null;
        String participantId = null;
        ParticipantSecurityOption participantSecurityOption = null;
        String ifMatch = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateWidgetSecurityOptionsForParticipation(authorization, widgetId, participantSetId, participantId, participantSecurityOption, ifMatch, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the state of a web form identified by widgetId in the path.
     *
     * This endpoint can be used by creator of the web form to transition between the states of web form. An allowed transition would follow any of the following sequence :  DRAFT-&gt;AUTHORING-&gt;ACTIVE, ACTIVE&lt;-&gt;INACTIVE, DRAFT-&gt;CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetStateTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        WidgetStateInfo widgetStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateWidgetState(authorization, widgetId, widgetStateInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of web form.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWidgetVisibilityTest() throws ApiException {
        String authorization = null;
        String widgetId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateWidgetVisibility(authorization, widgetId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
}

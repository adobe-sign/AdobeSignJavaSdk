/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiException;
import io.swagger.client.model.libraryDocuments.DocumentImageUrlsInfo;
import io.swagger.client.model.libraryDocuments.DocumentUrl;
import io.swagger.client.model.libraryDocuments.Documents;
import io.swagger.client.model.libraryDocuments.FormFieldPutInfo;
import io.swagger.client.model.libraryDocuments.LibraryDocumentCreationInfoV6;
import io.swagger.client.model.libraryDocuments.LibraryDocumentCreationResponse;
import io.swagger.client.model.libraryDocuments.LibraryDocumentEventList;
import io.swagger.client.model.libraryDocuments.LibraryDocumentFormFields;
import io.swagger.client.model.libraryDocuments.LibraryDocumentInfo;
import io.swagger.client.model.libraryDocuments.LibraryDocumentMembersInfo;
import io.swagger.client.model.libraryDocuments.LibraryDocumentStateInfo;
import io.swagger.client.model.libraryDocuments.LibraryDocumentViewResponse;
import io.swagger.client.model.libraryDocuments.LibraryDocuments;
import io.swagger.client.model.libraryDocuments.LibraryViewInfo;
import io.swagger.client.model.libraryDocuments.MyAgreementInfo;
import io.swagger.client.model.libraryDocuments.Note;
import io.swagger.client.model.libraryDocuments.VisibilityInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LibraryDocumentsApi
 */
@Ignore
public class LibraryDocumentsApiTest {

    private final LibraryDocumentsApi api = new LibraryDocumentsApi();

    
    /**
     * Creates a template that is placed in the library of the user for reuse.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLibraryDocumentTest() throws ApiException {
        String authorization = null;
        LibraryDocumentCreationInfoV6 libraryDocumentInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        LibraryDocumentCreationResponse response = api.createLibraryDocument(authorization, libraryDocumentInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest state view url of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createLibraryDocumentViewTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        LibraryViewInfo libraryViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentViewResponse response = api.createLibraryDocumentView(authorization, libraryDocumentId, libraryViewInfo, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves information of members (creator) of the library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllLibraryDocumentMembersTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentMembersInfo response = api.getAllLibraryDocumentMembers(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the combined document associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getCombinedDocument(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents associated with library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDocumentsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String versionId = null;
        Documents response = api.getDocuments(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, versionId);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentEventList response = api.getEvents(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered into the interactive form fields of the library document.
     *
     * This API can only be called by the creator of the library document
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormDataTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        String cursor = null;
        Integer pageSize = null;
        byte[] response = api.getFormData(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves details of form fields of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFormFieldsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentFormFields response = api.getFormFields(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves url of all visible pages of all the documents associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryCombinedDocumentUrlTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean attachAuditReport = null;
        DocumentUrl response = api.getLibraryCombinedDocumentUrl(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getLibraryDocument(authorization, libraryDocumentId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the audit trail associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentAuditTrailTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getLibraryDocumentAuditTrail(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentImageUrlsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String imageSizes = null;
        Integer startPage = null;
        Integer endPage = null;
        DocumentImageUrlsInfo response = api.getLibraryDocumentImageUrls(authorization, libraryDocumentId, documentId, xApiUser, xOnBehalfOfUser, imageSizes, startPage, endPage);

        // TODO: test validations
    }
    
    /**
     * Retrieves the details of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentInfoTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentCreationInfoV6 response = api.getLibraryDocumentInfo(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the library document information related to the api caller
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentInfoForUserTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        MyAgreementInfo response = api.getLibraryDocumentInfoForUser(authorization, libraryDocumentId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note of a library document for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getLibraryDocumentNoteForApiUser(authorization, libraryDocumentId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves library documents for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getLibraryDocumentsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String groupId = null;
        Boolean showHiddenLibraryDocuments = null;
        String cursor = null;
        Integer pageSize = null;
        LibraryDocuments response = api.getLibraryDocuments(authorization, xApiUser, xOnBehalfOfUser, groupId, showHiddenLibraryDocuments, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Updates details of form fields of a library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateFormFieldsTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        FormFieldPutInfo formFieldPutInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        LibraryDocumentFormFields response = api.updateFormFields(authorization, libraryDocumentId, formFieldPutInfo, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the library document.
     *
     * Currently status, name, sharingMode and templateTypes of the library document can only be updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        LibraryDocumentInfo libraryDocumentInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateLibraryDocument(authorization, libraryDocumentId, libraryDocumentInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note of a library document for the API user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentNoteForApiUserTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocumentNoteForApiUser(authorization, libraryDocumentId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the library document&#39;s state.
     *
     * Currently state can be changed from AUTHORING to ACTIVE, AUTHORING to REMOVED or ACTIVE to REMOVED
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentStateTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        LibraryDocumentStateInfo libraryDocumentStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateLibraryDocumentState(authorization, libraryDocumentId, libraryDocumentStateInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of library document.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateLibraryDocumentVisibilityTest() throws ApiException {
        String authorization = null;
        String libraryDocumentId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateLibraryDocumentVisibility(authorization, libraryDocumentId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
}

/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.model.ApiException;
import io.swagger.client.model.megaSigns.AgreementDocuments;
import io.swagger.client.model.megaSigns.BasicDocumentsImageUrlsInfo;
import io.swagger.client.model.megaSigns.DocumentUrl;
import io.swagger.client.model.megaSigns.FetchedMegaSignInfo;
import io.swagger.client.model.megaSigns.MegaSignChildAgreements;
import io.swagger.client.model.megaSigns.MegaSignCreationInfo;
import io.swagger.client.model.megaSigns.MegaSignCreationResponse;
import io.swagger.client.model.megaSigns.MegaSignInfo;
import io.swagger.client.model.megaSigns.MegaSignMembersInfo;
import io.swagger.client.model.megaSigns.MegaSignRemindersResponse;
import io.swagger.client.model.megaSigns.MegaSignStateInfo;
import io.swagger.client.model.megaSigns.MegaSignViewInfo;
import io.swagger.client.model.megaSigns.MegaSignViewResponse;
import io.swagger.client.model.megaSigns.MegaSigns;
import io.swagger.client.model.megaSigns.MegasignEventList;
import io.swagger.client.model.megaSigns.MyAgreementInfo;
import io.swagger.client.model.megaSigns.Note;
import io.swagger.client.model.megaSigns.ReminderCreationResult;
import io.swagger.client.model.megaSigns.ReminderInfo;
import io.swagger.client.model.megaSigns.ShareCreationInfoList;
import io.swagger.client.model.megaSigns.ShareCreationResponseList;
import io.swagger.client.model.megaSigns.VisibilityInfo;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MegaSignsApi
 */
@Ignore
public class MegaSignsApiTest {

    private final MegaSignsApi api = new MegaSignsApi();

    
    /**
     * Send an agreement out for signature to multiple recipients. Each recipient will receive and sign their own copy of the agreement.
     *
     * This is a primary endpoint which is used to create a new megaSign. A megaSign can be created using transientDocument, libraryDocument or a URL. You can create a megaSign in &lt;b&gt;IN_PROCESS&lt;/b&gt; - Create a megaSign in this state to immediately send it. You can use the PUT/megaSigns/{megaSignId}/state endpoint to transition the state of megaSign. An allowed transition would follow the following sequence: IN_PROCESS -&gt; CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createMegaSignTest() throws ApiException {
        String authorization = null;
        MegaSignCreationInfo megaSignInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        MegaSignCreationResponse response = api.createMegaSign(authorization, megaSignInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Creates a reminder on the specified participants of the MegaSign parent.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createReminderOnMegaSignTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderCreationResult response = api.createReminderOnMegaSign(authorization, megaSignId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Share a MegaSign parent and all the child agreements with someone.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createShareOnMegaSignTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        ShareCreationInfoList shareCreationInfoList = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ShareCreationResponseList response = api.createShareOnMegaSign(authorization, megaSignId, shareCreationInfoList, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves detailed member info along with IDs for different types of participants associated with the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllMegaSignMembersTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        MegaSignMembersInfo response = api.getAllMegaSignMembers(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of the original childAgreementsInfoFile that was uploaded by sender while creating the MegaSign.
     *
     * CSV file stream containing form data information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getChildAgreementsInfoFileTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String childAgreementsInfoFileId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getChildAgreementsInfoFile(authorization, megaSignId, childAgreementsInfoFileId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the events information for the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        MegasignEventList response = api.getEvents(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the IDs of the documents associated with a MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignAllDocumentsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        AgreementDocuments response = api.getMegaSignAllDocuments(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves image urls of all visible pages of a document associated with a MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignAllDocumentsImageUrlsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String imageSizes = null;
        Boolean showImageAvailabilityOnly = null;
        BasicDocumentsImageUrlsInfo response = api.getMegaSignAllDocumentsImageUrls(authorization, megaSignId, xApiUser, xOnBehalfOfUser, imageSizes, showImageAvailabilityOnly);

        // TODO: test validations
    }
    
    /**
     * Get all the child agreements of the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignChildAgreementsTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String cursor = null;
        Integer pageSize = null;
        MegaSignChildAgreements response = api.getMegaSignChildAgreements(authorization, megaSignId, xApiUser, xOnBehalfOfUser, cursor, pageSize);

        // TODO: test validations
    }
    
    /**
     * Retrieves a single combined PDF document for the documents associated with the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignCombinedDocumentTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        Boolean attachAuditReport = null;
        byte[] response = api.getMegaSignCombinedDocument(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves url of all visible pages of all the documents associated with the MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignCombinedDocumentUrlTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean attachAuditReport = null;
        DocumentUrl response = api.getMegaSignCombinedDocumentUrl(authorization, megaSignId, xApiUser, xOnBehalfOfUser, attachAuditReport);

        // TODO: test validations
    }
    
    /**
     * Retrieves the file stream of a document of a MegaSign parent agreement.
     *
     * Raw stream of the file
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignDocumentInfoTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String documentId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        byte[] response = api.getMegaSignDocumentInfo(authorization, megaSignId, documentId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves data entered by recipients into interactive form fields at the time they signed the child agreements of the specified MegaSign agreement
     *
     * CSV file stream containing form data information
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignFormDataTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        byte[] response = api.getMegaSignFormData(authorization, megaSignId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Get detailed information of the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignInfoTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifNoneMatch = null;
        FetchedMegaSignInfo response = api.getMegaSignInfo(authorization, megaSignId, xApiUser, xOnBehalfOfUser, ifNoneMatch);

        // TODO: test validations
    }
    
    /**
     * Retrieves the MegaSign parent agreement information related to the api caller
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignInfoForUserTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        MyAgreementInfo response = api.getMegaSignInfoForUser(authorization, megaSignId, xApiUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the latest note of a MegaSign parent agreement for the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignNoteForUserTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Note response = api.getMegaSignNoteForUser(authorization, megaSignId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves a specific reminder given the reminder id for the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignReminderTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String reminderId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        ReminderInfo response = api.getMegaSignReminder(authorization, megaSignId, reminderId, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves the reminders of the specified MegaSign parent agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignRemindersTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String status = null;
        MegaSignRemindersResponse response = api.getMegaSignReminders(authorization, megaSignId, xApiUser, xOnBehalfOfUser, status);

        // TODO: test validations
    }
    
    /**
     * Retrieves the requested views of mega sign agreement.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignViewTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        MegaSignViewInfo megaSignViewInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        MegaSignViewResponse response = api.getMegaSignView(authorization, megaSignId, megaSignViewInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Retrieves MegaSign parent agreements for a user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMegaSignsTest() throws ApiException {
        String authorization = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        Boolean showHiddenMegaSigns = null;
        String cursor = null;
        Integer pageSize = null;
        String groupId = null;
        MegaSigns response = api.getMegaSigns(authorization, xApiUser, xOnBehalfOfUser, showHiddenMegaSigns, cursor, pageSize, groupId);

        // TODO: test validations
    }
    
    /**
     * Update the expirationTime on an existing megaSign parent and all the child agreements that are already out for signature.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        MegaSignInfo megaSignInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateMegaSign(authorization, megaSignId, megaSignInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the latest note of a MegaSign parent agreement for the user.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignNoteForUserTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        Note note = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateMegaSignNoteForUser(authorization, megaSignId, note, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates an existing reminder for a MegaSign parent agreement.
     *
     * You can only update an ACTIVE reminder, and can only update the status to &#39;CANCELED&#39;, update reminderParticipantIds, update allUnsigned or update note.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignReminderTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        String reminderId = null;
        ReminderInfo reminderInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateMegaSignReminder(authorization, megaSignId, reminderId, reminderInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
    /**
     * Updates the state of a MegaSign identified by MegaSignId in the path.
     *
     * This endpoint can be used by creator of the MegaSign to transition between the states of megaSign. An allowed transition would follow the following sequence :  IN_PROCESS-&gt;CANCELLED.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignStateTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        MegaSignStateInfo megaSignStateInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        String ifMatch = null;
        api.updateMegaSignState(authorization, megaSignId, megaSignStateInfo, xApiUser, xOnBehalfOfUser, ifMatch);

        // TODO: test validations
    }
    
    /**
     * Updates the visibility of a MegaSign.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateMegaSignVisibilityTest() throws ApiException {
        String authorization = null;
        String megaSignId = null;
        VisibilityInfo visibilityInfo = null;
        String xApiUser = null;
        String xOnBehalfOfUser = null;
        api.updateMegaSignVisibility(authorization, megaSignId, visibilityInfo, xApiUser, xOnBehalfOfUser);

        // TODO: test validations
    }
    
}

/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.megaSigns;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * MegaSignChildAgreementsFileInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:44.788+11:00")
public class MegaSignChildAgreementsFileInfo {
  @SerializedName("transientDocumentId")
  private String transientDocumentId = null;

  /**
   * Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing megaSIgn child recipients.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
  public enum FileTypeEnum {
    CSV("CSV");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String text) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FileTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("fileType")
  private FileTypeEnum fileType = null;

  @SerializedName("childAgreementsInfoFileId")
  private String childAgreementsInfoFileId = null;

  public MegaSignChildAgreementsFileInfo transientDocumentId(String transientDocumentId) {
    this.transientDocumentId = transientDocumentId;
    return this;
  }

   /**
   * Transient id of the input file which contains participantSetsInfos. Currently only csv format is suppported. More details about CSV format &lt;a href&#x3D;&#39;https://www.adobe.com/go/documentcloud_megasigncsv&#39;&gt;here&lt;/a&gt;  
   * @return transientDocumentId
  **/
  @ApiModelProperty(value = "Transient id of the input file which contains participantSetsInfos. Currently only csv format is suppported. More details about CSV format <a href='https://www.adobe.com/go/documentcloud_megasigncsv'>here</a>  ")
  public String getTransientDocumentId() {
    return transientDocumentId;
  }

  public void setTransientDocumentId(String transientDocumentId) {
    this.transientDocumentId = transientDocumentId;
  }

  public MegaSignChildAgreementsFileInfo fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

   /**
   * Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing megaSIgn child recipients.
   * @return fileType
  **/
  @ApiModelProperty(value = "Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing megaSIgn child recipients.")
  public FileTypeEnum getFileType() {
    return fileType;
  }

  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }

  public MegaSignChildAgreementsFileInfo childAgreementsInfoFileId(String childAgreementsInfoFileId) {
    this.childAgreementsInfoFileId = childAgreementsInfoFileId;
    return this;
  }

   /**
   * id of the file containg information about the existing childAgreementsInfo associated with the megaSign. Will be ignored in POST and PUT calls and in the case of GET call, this is the only thing that will be returned. The content of the file can be fetched through GET /megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId} endpoint.
   * @return childAgreementsInfoFileId
  **/
  @ApiModelProperty(value = "id of the file containg information about the existing childAgreementsInfo associated with the megaSign. Will be ignored in POST and PUT calls and in the case of GET call, this is the only thing that will be returned. The content of the file can be fetched through GET /megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId} endpoint.")
  public String getChildAgreementsInfoFileId() {
    return childAgreementsInfoFileId;
  }

  public void setChildAgreementsInfoFileId(String childAgreementsInfoFileId) {
    this.childAgreementsInfoFileId = childAgreementsInfoFileId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MegaSignChildAgreementsFileInfo megaSignChildAgreementsFileInfo = (MegaSignChildAgreementsFileInfo) o;
    return Objects.equals(this.transientDocumentId, megaSignChildAgreementsFileInfo.transientDocumentId) &&
        Objects.equals(this.fileType, megaSignChildAgreementsFileInfo.fileType) &&
        Objects.equals(this.childAgreementsInfoFileId, megaSignChildAgreementsFileInfo.childAgreementsInfoFileId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transientDocumentId, fileType, childAgreementsInfoFileId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MegaSignChildAgreementsFileInfo {\n");
    
    sb.append("    transientDocumentId: ").append(toIndentedString(transientDocumentId)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    childAgreementsInfoFileId: ").append(toIndentedString(childAgreementsInfoFileId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


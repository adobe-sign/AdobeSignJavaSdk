/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.widgets;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.widgets.FileInfo;
import io.swagger.client.model.widgets.SecurityOption;
import io.swagger.client.model.widgets.VaultingInfo;
import io.swagger.client.model.widgets.WidgetAdditionalParticipationSetInfo;
import io.swagger.client.model.widgets.WidgetCcInfo;
import io.swagger.client.model.widgets.WidgetInActiveInfo;
import io.swagger.client.model.widgets.WidgetParticipantSetInfo;
import io.swagger.client.model.widgets.WidgetRedirectionInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * FetchedWidgetInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:55.369+11:00")
public class FetchedWidgetInfo {
  @SerializedName("additionalParticipantSetsInfo")
  private List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo = null;

  @SerializedName("creatorEmail")
  private String creatorEmail = null;

  @SerializedName("groupId")
  private String groupId = null;

  @SerializedName("locale")
  private String locale = null;

  @SerializedName("vaultingInfo")
  private VaultingInfo vaultingInfo = null;

  @SerializedName("securityOption")
  private SecurityOption securityOption = null;

  @SerializedName("widgetParticipantSetInfo")
  private WidgetParticipantSetInfo widgetParticipantSetInfo = null;

  @SerializedName("widgetInActiveInfo")
  private WidgetInActiveInfo widgetInActiveInfo = null;

  @SerializedName("ccs")
  private List<WidgetCcInfo> ccs = null;

  @SerializedName("createdDate")
  private Date createdDate = null;

  @SerializedName("isDocumentRetentionApplied")
  private Boolean isDocumentRetentionApplied = null;

  @SerializedName("lastEventDate")
  private Date lastEventDate = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("completionInfo")
  private WidgetRedirectionInfo completionInfo = null;

  @SerializedName("authFailureInfo")
  private WidgetRedirectionInfo authFailureInfo = null;

  @SerializedName("fileInfos")
  private List<FileInfo> fileInfos = null;

  @SerializedName("id")
  private String id = null;

  /**
   * The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DRAFT("DRAFT"),
    
    ACTIVE("ACTIVE"),
    
    AUTHORING("AUTHORING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String text) {
      for (StateEnum b : StateEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StateEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("state")
  private StateEnum state = null;

  /**
   * Status of the Web Form. If provided in POST, it will simply be ignored
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    DRAFT("DRAFT"),
    
    AUTHORING("AUTHORING"),
    
    ACTIVE("ACTIVE"),
    
    DOCUMENTS_NOT_YET_PROCESSED("DOCUMENTS_NOT_YET_PROCESSED"),
    
    DISABLED("DISABLED"),
    
    DISCARDED("DISCARDED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public FetchedWidgetInfo additionalParticipantSetsInfo(List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo) {
    this.additionalParticipantSetsInfo = additionalParticipantSetsInfo;
    return this;
  }

  public FetchedWidgetInfo addAdditionalParticipantSetsInfoItem(WidgetAdditionalParticipationSetInfo additionalParticipantSetsInfoItem) {
    if (this.additionalParticipantSetsInfo == null) {
      this.additionalParticipantSetsInfo = new ArrayList<WidgetAdditionalParticipationSetInfo>();
    }
    this.additionalParticipantSetsInfo.add(additionalParticipantSetsInfoItem);
    return this;
  }

   /**
   * List of all the participants in the web form except web form signer
   * @return additionalParticipantSetsInfo
  **/
  @ApiModelProperty(value = "List of all the participants in the web form except web form signer")
  public List<WidgetAdditionalParticipationSetInfo> getAdditionalParticipantSetsInfo() {
    return additionalParticipantSetsInfo;
  }

  public void setAdditionalParticipantSetsInfo(List<WidgetAdditionalParticipationSetInfo> additionalParticipantSetsInfo) {
    this.additionalParticipantSetsInfo = additionalParticipantSetsInfo;
  }

  public FetchedWidgetInfo creatorEmail(String creatorEmail) {
    this.creatorEmail = creatorEmail;
    return this;
  }

   /**
   * Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored
   * @return creatorEmail
  **/
  @ApiModelProperty(value = "Email of web form creator. Only returned in GET response. Cannot be provided in POST/PUT request. If provided in POST, it will simply be ignored")
  public String getCreatorEmail() {
    return creatorEmail;
  }

  public void setCreatorEmail(String creatorEmail) {
    this.creatorEmail = creatorEmail;
  }

  public FetchedWidgetInfo groupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

   /**
   * The ID of the group to which the widget belongs to. If not provided during creation, primary group of the creator will be used
   * @return groupId
  **/
  @ApiModelProperty(value = "The ID of the group to which the widget belongs to. If not provided during creation, primary group of the creator will be used")
  public String getGroupId() {
    return groupId;
  }

  public void setGroupId(String groupId) {
    this.groupId = groupId;
  }

  public FetchedWidgetInfo locale(String locale) {
    this.locale = locale;
    return this;
  }

   /**
   * The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator
   * @return locale
  **/
  @ApiModelProperty(value = "The locale associated with this web form - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the web form creator")
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }

  public FetchedWidgetInfo vaultingInfo(VaultingInfo vaultingInfo) {
    this.vaultingInfo = vaultingInfo;
    return this;
  }

   /**
   * Vaulting properties that allows Adobe Sign to securely store documents with a vault provider
   * @return vaultingInfo
  **/
  @ApiModelProperty(value = "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider")
  public VaultingInfo getVaultingInfo() {
    return vaultingInfo;
  }

  public void setVaultingInfo(VaultingInfo vaultingInfo) {
    this.vaultingInfo = vaultingInfo;
  }

  public FetchedWidgetInfo securityOption(SecurityOption securityOption) {
    this.securityOption = securityOption;
    return this;
  }

   /**
   * Secondary security parameters for the web form
   * @return securityOption
  **/
  @ApiModelProperty(value = "Secondary security parameters for the web form")
  public SecurityOption getSecurityOption() {
    return securityOption;
  }

  public void setSecurityOption(SecurityOption securityOption) {
    this.securityOption = securityOption;
  }

  public FetchedWidgetInfo widgetParticipantSetInfo(WidgetParticipantSetInfo widgetParticipantSetInfo) {
    this.widgetParticipantSetInfo = widgetParticipantSetInfo;
    return this;
  }

   /**
   * Represents web form participant for whom email should not be provided
   * @return widgetParticipantSetInfo
  **/
  @ApiModelProperty(value = "Represents web form participant for whom email should not be provided")
  public WidgetParticipantSetInfo getWidgetParticipantSetInfo() {
    return widgetParticipantSetInfo;
  }

  public void setWidgetParticipantSetInfo(WidgetParticipantSetInfo widgetParticipantSetInfo) {
    this.widgetParticipantSetInfo = widgetParticipantSetInfo;
  }

  public FetchedWidgetInfo widgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
    return this;
  }

   /**
   * The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request
   * @return widgetInActiveInfo
  **/
  @ApiModelProperty(value = "The custom message which will be displayed to the user or the URL to which user will be redirected when the web form is accessed in a disabled state. This can only be specified in PUT request")
  public WidgetInActiveInfo getWidgetInActiveInfo() {
    return widgetInActiveInfo;
  }

  public void setWidgetInActiveInfo(WidgetInActiveInfo widgetInActiveInfo) {
    this.widgetInActiveInfo = widgetInActiveInfo;
  }

  public FetchedWidgetInfo ccs(List<WidgetCcInfo> ccs) {
    this.ccs = ccs;
    return this;
  }

  public FetchedWidgetInfo addCcsItem(WidgetCcInfo ccsItem) {
    if (this.ccs == null) {
      this.ccs = new ArrayList<WidgetCcInfo>();
    }
    this.ccs.add(ccsItem);
    return this;
  }

   /**
   * A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file
   * @return ccs
  **/
  @ApiModelProperty(value = "A list of one or more email addresses that you want to copy on this transaction. The email addresses will each receive an email when the final agreement created through web form is signed. The email addresses will also receive a copy of the document, attached as a PDF file")
  public List<WidgetCcInfo> getCcs() {
    return ccs;
  }

  public void setCcs(List<WidgetCcInfo> ccs) {
    this.ccs = ccs;
  }

  public FetchedWidgetInfo createdDate(Date createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return createdDate
  **/
  @ApiModelProperty(value = "Date when web form was created. If provided in POST, it will simply be ignored. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(Date createdDate) {
    this.createdDate = createdDate;
  }

  public FetchedWidgetInfo isDocumentRetentionApplied(Boolean isDocumentRetentionApplied) {
    this.isDocumentRetentionApplied = isDocumentRetentionApplied;
    return this;
  }

   /**
   * Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.
   * @return isDocumentRetentionApplied
  **/
  @ApiModelProperty(value = "Is document retention applied for this resource.  If provided in POST or PUT, it will simply be ignored.")
  public Boolean isIsDocumentRetentionApplied() {
    return isDocumentRetentionApplied;
  }

  public void setIsDocumentRetentionApplied(Boolean isDocumentRetentionApplied) {
    this.isDocumentRetentionApplied = isDocumentRetentionApplied;
  }

  public FetchedWidgetInfo lastEventDate(Date lastEventDate) {
    this.lastEventDate = lastEventDate;
    return this;
  }

   /**
   * The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return lastEventDate
  **/
  @ApiModelProperty(value = "The date of the last event that occurred for this web form.  Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getLastEventDate() {
    return lastEventDate;
  }

  public void setLastEventDate(Date lastEventDate) {
    this.lastEventDate = lastEventDate;
  }

  public FetchedWidgetInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the web form that will be used to identify it, in emails, website and other places
   * @return name
  **/
  @ApiModelProperty(value = "The name of the web form that will be used to identify it, in emails, website and other places")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public FetchedWidgetInfo completionInfo(WidgetRedirectionInfo completionInfo) {
    this.completionInfo = completionInfo;
    return this;
  }

   /**
   * URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form
   * @return completionInfo
  **/
  @ApiModelProperty(value = "URL and associated properties for the success page the web form signer will be taken to after performing desired action on the web form")
  public WidgetRedirectionInfo getCompletionInfo() {
    return completionInfo;
  }

  public void setCompletionInfo(WidgetRedirectionInfo completionInfo) {
    this.completionInfo = completionInfo;
  }

  public FetchedWidgetInfo authFailureInfo(WidgetRedirectionInfo authFailureInfo) {
    this.authFailureInfo = authFailureInfo;
    return this;
  }

   /**
   * URL and associated properties for the error page the web form signer will be taken after failing to authenticate
   * @return authFailureInfo
  **/
  @ApiModelProperty(value = "URL and associated properties for the error page the web form signer will be taken after failing to authenticate")
  public WidgetRedirectionInfo getAuthFailureInfo() {
    return authFailureInfo;
  }

  public void setAuthFailureInfo(WidgetRedirectionInfo authFailureInfo) {
    this.authFailureInfo = authFailureInfo;
  }

  public FetchedWidgetInfo fileInfos(List<FileInfo> fileInfos) {
    this.fileInfos = fileInfos;
    return this;
  }

  public FetchedWidgetInfo addFileInfosItem(FileInfo fileInfosItem) {
    if (this.fileInfos == null) {
      this.fileInfos = new ArrayList<FileInfo>();
    }
    this.fileInfos.add(fileInfosItem);
    return this;
  }

   /**
   * A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified
   * @return fileInfos
  **/
  @ApiModelProperty(value = "A list of one or more files (or references to files) that will be used to create the web form. If more than one file is provided, they will be combined before the web form is created. Library documents are not permitted. Note: Only one of the four parameters in every FileInfo object must be specified")
  public List<FileInfo> getFileInfos() {
    return fileInfos;
  }

  public void setFileInfos(List<FileInfo> fileInfos) {
    this.fileInfos = fileInfos;
  }

  public FetchedWidgetInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored
   * @return id
  **/
  @ApiModelProperty(value = "A resource identifier that can be used to uniquely identify the web form in other apis. If provided in POST, it will simply be ignored")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public FetchedWidgetInfo state(StateEnum state) {
    this.state = state;
    return this;
  }

   /**
   * The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID
   * @return state
  **/
  @ApiModelProperty(value = "The state in which the web form should land. For example in order to create a web form in DRAFT state, field should be DRAFT. The state field will never get returned in GET /widgets/{ID} and will be ignored if provided in PUT /widgets/{ID} call. The eventual status of the web form can be obtained from GET /widgets/ID")
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }

  public FetchedWidgetInfo status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * Status of the Web Form. If provided in POST, it will simply be ignored
   * @return status
  **/
  @ApiModelProperty(value = "Status of the Web Form. If provided in POST, it will simply be ignored")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FetchedWidgetInfo fetchedWidgetInfo = (FetchedWidgetInfo) o;
    return Objects.equals(this.additionalParticipantSetsInfo, fetchedWidgetInfo.additionalParticipantSetsInfo) &&
        Objects.equals(this.creatorEmail, fetchedWidgetInfo.creatorEmail) &&
        Objects.equals(this.groupId, fetchedWidgetInfo.groupId) &&
        Objects.equals(this.locale, fetchedWidgetInfo.locale) &&
        Objects.equals(this.vaultingInfo, fetchedWidgetInfo.vaultingInfo) &&
        Objects.equals(this.securityOption, fetchedWidgetInfo.securityOption) &&
        Objects.equals(this.widgetParticipantSetInfo, fetchedWidgetInfo.widgetParticipantSetInfo) &&
        Objects.equals(this.widgetInActiveInfo, fetchedWidgetInfo.widgetInActiveInfo) &&
        Objects.equals(this.ccs, fetchedWidgetInfo.ccs) &&
        Objects.equals(this.createdDate, fetchedWidgetInfo.createdDate) &&
        Objects.equals(this.isDocumentRetentionApplied, fetchedWidgetInfo.isDocumentRetentionApplied) &&
        Objects.equals(this.lastEventDate, fetchedWidgetInfo.lastEventDate) &&
        Objects.equals(this.name, fetchedWidgetInfo.name) &&
        Objects.equals(this.completionInfo, fetchedWidgetInfo.completionInfo) &&
        Objects.equals(this.authFailureInfo, fetchedWidgetInfo.authFailureInfo) &&
        Objects.equals(this.fileInfos, fetchedWidgetInfo.fileInfos) &&
        Objects.equals(this.id, fetchedWidgetInfo.id) &&
        Objects.equals(this.state, fetchedWidgetInfo.state) &&
        Objects.equals(this.status, fetchedWidgetInfo.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalParticipantSetsInfo, creatorEmail, groupId, locale, vaultingInfo, securityOption, widgetParticipantSetInfo, widgetInActiveInfo, ccs, createdDate, isDocumentRetentionApplied, lastEventDate, name, completionInfo, authFailureInfo, fileInfos, id, state, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FetchedWidgetInfo {\n");
    
    sb.append("    additionalParticipantSetsInfo: ").append(toIndentedString(additionalParticipantSetsInfo)).append("\n");
    sb.append("    creatorEmail: ").append(toIndentedString(creatorEmail)).append("\n");
    sb.append("    groupId: ").append(toIndentedString(groupId)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    vaultingInfo: ").append(toIndentedString(vaultingInfo)).append("\n");
    sb.append("    securityOption: ").append(toIndentedString(securityOption)).append("\n");
    sb.append("    widgetParticipantSetInfo: ").append(toIndentedString(widgetParticipantSetInfo)).append("\n");
    sb.append("    widgetInActiveInfo: ").append(toIndentedString(widgetInActiveInfo)).append("\n");
    sb.append("    ccs: ").append(toIndentedString(ccs)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    isDocumentRetentionApplied: ").append(toIndentedString(isDocumentRetentionApplied)).append("\n");
    sb.append("    lastEventDate: ").append(toIndentedString(lastEventDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    completionInfo: ").append(toIndentedString(completionInfo)).append("\n");
    sb.append("    authFailureInfo: ").append(toIndentedString(authFailureInfo)).append("\n");
    sb.append("    fileInfos: ").append(toIndentedString(fileInfos)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


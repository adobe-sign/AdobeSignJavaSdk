/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.workflows;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.Date;

/**
 * UserWorkflow
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:59.041+11:00")
public class UserWorkflow {
  @SerializedName("scopeId")
  private String scopeId = null;

  @SerializedName("created")
  private Date created = null;

  @SerializedName("displayName")
  private String displayName = null;

  /**
   * The workflow scope (ACCOUNT or GROUP or OTHER)
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    ACCOUNT("ACCOUNT"),
    
    GROUP("GROUP");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scope")
  private ScopeEnum scope = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  /**
   * The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    DRAFT("DRAFT"),
    
    HIDDEN("HIDDEN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public UserWorkflow scopeId(String scopeId) {
    this.scopeId = scopeId;
    return this;
  }

   /**
   * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
   * @return scopeId
  **/
  @ApiModelProperty(value = "Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.")
  public String getScopeId() {
    return scopeId;
  }

  public void setScopeId(String scopeId) {
    this.scopeId = scopeId;
  }

  public UserWorkflow created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The date on which the workflow was created. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return created
  **/
  @ApiModelProperty(value = "The date on which the workflow was created. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public UserWorkflow displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the workflow.
   * @return displayName
  **/
  @ApiModelProperty(value = "The display name of the workflow.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public UserWorkflow scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The workflow scope (ACCOUNT or GROUP or OTHER)
   * @return scope
  **/
  @ApiModelProperty(value = "The workflow scope (ACCOUNT or GROUP or OTHER)")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public UserWorkflow name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the workflow.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the workflow.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public UserWorkflow description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description provided for this workflow at the time of its creation
   * @return description
  **/
  @ApiModelProperty(value = "Description provided for this workflow at the time of its creation")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public UserWorkflow id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The unique identifier of a workflow
   * @return id
  **/
  @ApiModelProperty(value = "The unique identifier of a workflow")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public UserWorkflow status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
   * @return status
  **/
  @ApiModelProperty(value = "The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWorkflow userWorkflow = (UserWorkflow) o;
    return Objects.equals(this.scopeId, userWorkflow.scopeId) &&
        Objects.equals(this.created, userWorkflow.created) &&
        Objects.equals(this.displayName, userWorkflow.displayName) &&
        Objects.equals(this.scope, userWorkflow.scope) &&
        Objects.equals(this.name, userWorkflow.name) &&
        Objects.equals(this.description, userWorkflow.description) &&
        Objects.equals(this.id, userWorkflow.id) &&
        Objects.equals(this.status, userWorkflow.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scopeId, created, displayName, scope, name, description, id, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWorkflow {\n");
    
    sb.append("    scopeId: ").append(toIndentedString(scopeId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


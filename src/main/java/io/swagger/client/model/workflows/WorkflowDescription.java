/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.workflows;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.workflows.CCsListInfoDescription;
import io.swagger.client.model.workflows.ExpirationFieldInfoDescription;
import io.swagger.client.model.workflows.FileInfosDescription;
import io.swagger.client.model.workflows.LocaleFieldInfoDescription;
import io.swagger.client.model.workflows.MergeFieldInfoDescription;
import io.swagger.client.model.workflows.PasswordFieldInfoDescription;
import io.swagger.client.model.workflows.RecipientsListInfoDescription;
import io.swagger.client.model.workflows.WorkflowDefaultParams;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * WorkflowDescription
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:59.041+11:00")
public class WorkflowDescription {
  @SerializedName("scopeId")
  private String scopeId = null;

  @SerializedName("messageInfo")
  private WorkflowDefaultParams messageInfo = null;

  @SerializedName("created")
  private Date created = null;

  @SerializedName("displayName")
  private String displayName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("mergeFieldsInfo")
  private List<MergeFieldInfoDescription> mergeFieldsInfo = null;

  @SerializedName("agreementNameInfo")
  private WorkflowDefaultParams agreementNameInfo = null;

  @SerializedName("passwordInfo")
  private PasswordFieldInfoDescription passwordInfo = null;

  @SerializedName("authoringInfo")
  private WorkflowDefaultParams authoringInfo = null;

  @SerializedName("recipientsListInfo")
  private List<RecipientsListInfoDescription> recipientsListInfo = null;

  /**
   * The workflow scope (ACCOUNT or GROUP or OTHER)
   */
  @JsonAdapter(ScopeEnum.Adapter.class)
  public enum ScopeEnum {
    ACCOUNT("ACCOUNT"),
    
    GROUP("GROUP");

    private String value;

    ScopeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ScopeEnum fromValue(String text) {
      for (ScopeEnum b : ScopeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ScopeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ScopeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ScopeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ScopeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("scope")
  private ScopeEnum scope = null;

  @SerializedName("expirationInfo")
  private ExpirationFieldInfoDescription expirationInfo = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("modified")
  private Date modified = null;

  @SerializedName("fileInfos")
  private List<FileInfosDescription> fileInfos = null;

  @SerializedName("localeInfo")
  private LocaleFieldInfoDescription localeInfo = null;

  @SerializedName("ccsListInfo")
  private List<CCsListInfoDescription> ccsListInfo = null;

  /**
   * The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    DRAFT("DRAFT"),
    
    HIDDEN("HIDDEN");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  public WorkflowDescription scopeId(String scopeId) {
    this.scopeId = scopeId;
    return this;
  }

   /**
   * Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.
   * @return scopeId
  **/
  @ApiModelProperty(value = "Identifier of scope. Currently it is applicable for scope GROUP only and the value will be groupId.")
  public String getScopeId() {
    return scopeId;
  }

  public void setScopeId(String scopeId) {
    this.scopeId = scopeId;
  }

  public WorkflowDescription messageInfo(WorkflowDefaultParams messageInfo) {
    this.messageInfo = messageInfo;
    return this;
  }

   /**
   * Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return messageInfo
  **/
  @ApiModelProperty(value = "Information about message field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public WorkflowDefaultParams getMessageInfo() {
    return messageInfo;
  }

  public void setMessageInfo(WorkflowDefaultParams messageInfo) {
    this.messageInfo = messageInfo;
  }

  public WorkflowDescription created(Date created) {
    this.created = created;
    return this;
  }

   /**
   * The day on which the workflow was created
   * @return created
  **/
  @ApiModelProperty(value = "The day on which the workflow was created")
  public Date getCreated() {
    return created;
  }

  public void setCreated(Date created) {
    this.created = created;
  }

  public WorkflowDescription displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * The display name of the workflow.
   * @return displayName
  **/
  @ApiModelProperty(value = "The display name of the workflow.")
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public WorkflowDescription description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description provided for this workflow at the time of its creation
   * @return description
  **/
  @ApiModelProperty(value = "Description provided for this workflow at the time of its creation")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public WorkflowDescription mergeFieldsInfo(List<MergeFieldInfoDescription> mergeFieldsInfo) {
    this.mergeFieldsInfo = mergeFieldsInfo;
    return this;
  }

  public WorkflowDescription addMergeFieldsInfoItem(MergeFieldInfoDescription mergeFieldsInfoItem) {
    if (this.mergeFieldsInfo == null) {
      this.mergeFieldsInfo = new ArrayList<MergeFieldInfoDescription>();
    }
    this.mergeFieldsInfo.add(mergeFieldsInfoItem);
    return this;
  }

   /**
   * Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return mergeFieldsInfo
  **/
  @ApiModelProperty(value = "Information about customFieldInfos in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public List<MergeFieldInfoDescription> getMergeFieldsInfo() {
    return mergeFieldsInfo;
  }

  public void setMergeFieldsInfo(List<MergeFieldInfoDescription> mergeFieldsInfo) {
    this.mergeFieldsInfo = mergeFieldsInfo;
  }

  public WorkflowDescription agreementNameInfo(WorkflowDefaultParams agreementNameInfo) {
    this.agreementNameInfo = agreementNameInfo;
    return this;
  }

   /**
   * Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return agreementNameInfo
  **/
  @ApiModelProperty(value = "Information about name field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public WorkflowDefaultParams getAgreementNameInfo() {
    return agreementNameInfo;
  }

  public void setAgreementNameInfo(WorkflowDefaultParams agreementNameInfo) {
    this.agreementNameInfo = agreementNameInfo;
  }

  public WorkflowDescription passwordInfo(PasswordFieldInfoDescription passwordInfo) {
    this.passwordInfo = passwordInfo;
    return this;
  }

   /**
   * Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return passwordInfo
  **/
  @ApiModelProperty(value = "Information about openPassword field in SecurityOptions input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public PasswordFieldInfoDescription getPasswordInfo() {
    return passwordInfo;
  }

  public void setPasswordInfo(PasswordFieldInfoDescription passwordInfo) {
    this.passwordInfo = passwordInfo;
  }

  public WorkflowDescription authoringInfo(WorkflowDefaultParams authoringInfo) {
    this.authoringInfo = authoringInfo;
    return this;
  }

   /**
   * Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return authoringInfo
  **/
  @ApiModelProperty(value = "Information about authoringRequested field in SendDocumentInteractiveOptions input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public WorkflowDefaultParams getAuthoringInfo() {
    return authoringInfo;
  }

  public void setAuthoringInfo(WorkflowDefaultParams authoringInfo) {
    this.authoringInfo = authoringInfo;
  }

  public WorkflowDescription recipientsListInfo(List<RecipientsListInfoDescription> recipientsListInfo) {
    this.recipientsListInfo = recipientsListInfo;
    return this;
  }

  public WorkflowDescription addRecipientsListInfoItem(RecipientsListInfoDescription recipientsListInfoItem) {
    if (this.recipientsListInfo == null) {
      this.recipientsListInfo = new ArrayList<RecipientsListInfoDescription>();
    }
    this.recipientsListInfo.add(recipientsListInfoItem);
    return this;
  }

   /**
   * Information about RecepientsInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return recipientsListInfo
  **/
  @ApiModelProperty(value = "Information about RecepientsInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public List<RecipientsListInfoDescription> getRecipientsListInfo() {
    return recipientsListInfo;
  }

  public void setRecipientsListInfo(List<RecipientsListInfoDescription> recipientsListInfo) {
    this.recipientsListInfo = recipientsListInfo;
  }

  public WorkflowDescription scope(ScopeEnum scope) {
    this.scope = scope;
    return this;
  }

   /**
   * The workflow scope (ACCOUNT or GROUP or OTHER)
   * @return scope
  **/
  @ApiModelProperty(value = "The workflow scope (ACCOUNT or GROUP or OTHER)")
  public ScopeEnum getScope() {
    return scope;
  }

  public void setScope(ScopeEnum scope) {
    this.scope = scope;
  }

  public WorkflowDescription expirationInfo(ExpirationFieldInfoDescription expirationInfo) {
    this.expirationInfo = expirationInfo;
    return this;
  }

   /**
   * Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return expirationInfo
  **/
  @ApiModelProperty(value = "Information about daysUntilSigningDeadline field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public ExpirationFieldInfoDescription getExpirationInfo() {
    return expirationInfo;
  }

  public void setExpirationInfo(ExpirationFieldInfoDescription expirationInfo) {
    this.expirationInfo = expirationInfo;
  }

  public WorkflowDescription name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the workflow.
   * @return name
  **/
  @ApiModelProperty(value = "The name of the workflow.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowDescription modified(Date modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The day on which the workflow was last modified
   * @return modified
  **/
  @ApiModelProperty(value = "The day on which the workflow was last modified")
  public Date getModified() {
    return modified;
  }

  public void setModified(Date modified) {
    this.modified = modified;
  }

  public WorkflowDescription fileInfos(List<FileInfosDescription> fileInfos) {
    this.fileInfos = fileInfos;
    return this;
  }

  public WorkflowDescription addFileInfosItem(FileInfosDescription fileInfosItem) {
    if (this.fileInfos == null) {
      this.fileInfos = new ArrayList<FileInfosDescription>();
    }
    this.fileInfos.add(fileInfosItem);
    return this;
  }

   /**
   * Information about FileInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return fileInfos
  **/
  @ApiModelProperty(value = "Information about FileInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public List<FileInfosDescription> getFileInfos() {
    return fileInfos;
  }

  public void setFileInfos(List<FileInfosDescription> fileInfos) {
    this.fileInfos = fileInfos;
  }

  public WorkflowDescription localeInfo(LocaleFieldInfoDescription localeInfo) {
    this.localeInfo = localeInfo;
    return this;
  }

   /**
   * Information about locale  field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return localeInfo
  **/
  @ApiModelProperty(value = "Information about locale  field in DocumentCreationInfo input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public LocaleFieldInfoDescription getLocaleInfo() {
    return localeInfo;
  }

  public void setLocaleInfo(LocaleFieldInfoDescription localeInfo) {
    this.localeInfo = localeInfo;
  }

  public WorkflowDescription ccsListInfo(List<CCsListInfoDescription> ccsListInfo) {
    this.ccsListInfo = ccsListInfo;
    return this;
  }

  public WorkflowDescription addCcsListInfoItem(CCsListInfoDescription ccsListInfoItem) {
    if (this.ccsListInfo == null) {
      this.ccsListInfo = new ArrayList<CCsListInfoDescription>();
    }
    this.ccsListInfo.add(ccsListInfoItem);
    return this;
  }

   /**
   * Information about CCList input field in the agreement creation request when using the API which creates an agreement in a workflow
   * @return ccsListInfo
  **/
  @ApiModelProperty(value = "Information about CCList input field in the agreement creation request when using the API which creates an agreement in a workflow")
  public List<CCsListInfoDescription> getCcsListInfo() {
    return ccsListInfo;
  }

  public void setCcsListInfo(List<CCsListInfoDescription> ccsListInfo) {
    this.ccsListInfo = ccsListInfo;
  }

  public WorkflowDescription status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)
   * @return status
  **/
  @ApiModelProperty(value = "The workflow status (ACTIVE or DRAFT or INACTIVE or OTHER)")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowDescription workflowDescription = (WorkflowDescription) o;
    return Objects.equals(this.scopeId, workflowDescription.scopeId) &&
        Objects.equals(this.messageInfo, workflowDescription.messageInfo) &&
        Objects.equals(this.created, workflowDescription.created) &&
        Objects.equals(this.displayName, workflowDescription.displayName) &&
        Objects.equals(this.description, workflowDescription.description) &&
        Objects.equals(this.mergeFieldsInfo, workflowDescription.mergeFieldsInfo) &&
        Objects.equals(this.agreementNameInfo, workflowDescription.agreementNameInfo) &&
        Objects.equals(this.passwordInfo, workflowDescription.passwordInfo) &&
        Objects.equals(this.authoringInfo, workflowDescription.authoringInfo) &&
        Objects.equals(this.recipientsListInfo, workflowDescription.recipientsListInfo) &&
        Objects.equals(this.scope, workflowDescription.scope) &&
        Objects.equals(this.expirationInfo, workflowDescription.expirationInfo) &&
        Objects.equals(this.name, workflowDescription.name) &&
        Objects.equals(this.modified, workflowDescription.modified) &&
        Objects.equals(this.fileInfos, workflowDescription.fileInfos) &&
        Objects.equals(this.localeInfo, workflowDescription.localeInfo) &&
        Objects.equals(this.ccsListInfo, workflowDescription.ccsListInfo) &&
        Objects.equals(this.status, workflowDescription.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(scopeId, messageInfo, created, displayName, description, mergeFieldsInfo, agreementNameInfo, passwordInfo, authoringInfo, recipientsListInfo, scope, expirationInfo, name, modified, fileInfos, localeInfo, ccsListInfo, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowDescription {\n");
    
    sb.append("    scopeId: ").append(toIndentedString(scopeId)).append("\n");
    sb.append("    messageInfo: ").append(toIndentedString(messageInfo)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mergeFieldsInfo: ").append(toIndentedString(mergeFieldsInfo)).append("\n");
    sb.append("    agreementNameInfo: ").append(toIndentedString(agreementNameInfo)).append("\n");
    sb.append("    passwordInfo: ").append(toIndentedString(passwordInfo)).append("\n");
    sb.append("    authoringInfo: ").append(toIndentedString(authoringInfo)).append("\n");
    sb.append("    recipientsListInfo: ").append(toIndentedString(recipientsListInfo)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    expirationInfo: ").append(toIndentedString(expirationInfo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    fileInfos: ").append(toIndentedString(fileInfos)).append("\n");
    sb.append("    localeInfo: ").append(toIndentedString(localeInfo)).append("\n");
    sb.append("    ccsListInfo: ").append(toIndentedString(ccsListInfo)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


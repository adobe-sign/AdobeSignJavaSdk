/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.agreements;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * PhoneInfo
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:34.872+11:00")
public class PhoneInfo {
  @SerializedName("countryIsoCode")
  private String countryIsoCode = null;

  @SerializedName("phone")
  private String phone = null;

  @SerializedName("countryCode")
  private String countryCode = null;

  public PhoneInfo countryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
    return this;
  }

   /**
   * The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE
   * @return countryIsoCode
  **/
  @ApiModelProperty(value = "The country ISO Alpha-2 code required for the participant to view and sign the document if authentication method is PHONE")
  public String getCountryIsoCode() {
    return countryIsoCode;
  }

  public void setCountryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
  }

  public PhoneInfo phone(String phone) {
    this.phone = phone;
    return this;
  }

   /**
   * The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.
   * @return phone
  **/
  @ApiModelProperty(value = "The phone number required for the participant to view and sign the document if authentication method is PHONE. When replacing a participant that has PHONE authentication specified, you must supply a phone number for the new participant.")
  public String getPhone() {
    return phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public PhoneInfo countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

   /**
   * The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE
   * @return countryCode
  **/
  @ApiModelProperty(value = "The numeric country calling code (ISD code) required for the participant to view and sign the document if authentication type is PHONE")
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneInfo phoneInfo = (PhoneInfo) o;
    return Objects.equals(this.countryIsoCode, phoneInfo.countryIsoCode) &&
        Objects.equals(this.phone, phoneInfo.phone) &&
        Objects.equals(this.countryCode, phoneInfo.countryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryIsoCode, phone, countryCode);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneInfo {\n");
    
    sb.append("    countryIsoCode: ").append(toIndentedString(countryIsoCode)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


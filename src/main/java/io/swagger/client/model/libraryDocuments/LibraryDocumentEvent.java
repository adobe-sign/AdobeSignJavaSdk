/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 6.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model.libraryDocuments;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.client.model.libraryDocuments.DigitalSignatureInfo;
import io.swagger.client.model.libraryDocuments.LibDocEventDeviceLocation;
import java.io.IOException;
import java.util.Date;

/**
 * LibraryDocumentEvent
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2020-11-06T13:23:41.998+11:00")
public class LibraryDocumentEvent {
  @SerializedName("date")
  private Date date = null;

  @SerializedName("initiatingUserName")
  private String initiatingUserName = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("actingUserName")
  private String actingUserName = null;

  @SerializedName("actingUserIpAddress")
  private String actingUserIpAddress = null;

  @SerializedName("participantEmail")
  private String participantEmail = null;

  /**
   * Type of library document event
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AUTO_CANCELLED_CONVERSION_PROBLEM("AUTO_CANCELLED_CONVERSION_PROBLEM"),
    
    CREATED("CREATED"),
    
    MODIFIED("MODIFIED"),
    
    DOCUMENTS_DELETED("DOCUMENTS_DELETED");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("type")
  private TypeEnum type = null;

  /**
   * Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
   */
  @JsonAdapter(ParticipantRoleEnum.Adapter.class)
  public enum ParticipantRoleEnum {
    SIGNER("SIGNER"),
    
    DELEGATE_TO_SIGNER("DELEGATE_TO_SIGNER"),
    
    APPROVER("APPROVER"),
    
    DELEGATE_TO_APPROVER("DELEGATE_TO_APPROVER"),
    
    ACCEPTOR("ACCEPTOR"),
    
    DELEGATE_TO_ACCEPTOR("DELEGATE_TO_ACCEPTOR"),
    
    FORM_FILLER("FORM_FILLER"),
    
    DELEGATE_TO_FORM_FILLER("DELEGATE_TO_FORM_FILLER"),
    
    CERTIFIED_RECIPIENT("CERTIFIED_RECIPIENT"),
    
    DELEGATE_TO_CERTIFIED_RECIPIENT("DELEGATE_TO_CERTIFIED_RECIPIENT"),
    
    SHARE("SHARE"),
    
    SENDER("SENDER");

    private String value;

    ParticipantRoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParticipantRoleEnum fromValue(String text) {
      for (ParticipantRoleEnum b : ParticipantRoleEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ParticipantRoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParticipantRoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParticipantRoleEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ParticipantRoleEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("participantRole")
  private ParticipantRoleEnum participantRole = null;

  @SerializedName("vaultEventId")
  private String vaultEventId = null;

  @SerializedName("participantId")
  private String participantId = null;

  @SerializedName("versionId")
  private String versionId = null;

  @SerializedName("actingUserEmail")
  private String actingUserEmail = null;

  @SerializedName("devicePhoneNumber")
  private String devicePhoneNumber = null;

  @SerializedName("initiatingUserEmail")
  private String initiatingUserEmail = null;

  @SerializedName("digitalSignatureInfo")
  private DigitalSignatureInfo digitalSignatureInfo = null;

  @SerializedName("vaultProviderName")
  private String vaultProviderName = null;

  @SerializedName("comment")
  private String comment = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("synchronizationId")
  private String synchronizationId = null;

  @SerializedName("deviceLocation")
  private LibDocEventDeviceLocation deviceLocation = null;

  public LibraryDocumentEvent date(Date date) {
    this.date = date;
    return this;
  }

   /**
   * The date of the audit event. Format would be yyyy-MM-dd&#39;T&#39;HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time
   * @return date
  **/
  @ApiModelProperty(value = "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time")
  public Date getDate() {
    return date;
  }

  public void setDate(Date date) {
    this.date = date;
  }

  public LibraryDocumentEvent initiatingUserName(String initiatingUserName) {
    this.initiatingUserName = initiatingUserName;
    return this;
  }

   /**
   * Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
   * @return initiatingUserName
  **/
  @ApiModelProperty(value = "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect")
  public String getInitiatingUserName() {
    return initiatingUserName;
  }

  public void setInitiatingUserName(String initiatingUserName) {
    this.initiatingUserName = initiatingUserName;
  }

  public LibraryDocumentEvent description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A description of the audit event
   * @return description
  **/
  @ApiModelProperty(value = "A description of the audit event")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public LibraryDocumentEvent actingUserName(String actingUserName) {
    this.actingUserName = actingUserName;
    return this;
  }

   /**
   * The name of the acting user
   * @return actingUserName
  **/
  @ApiModelProperty(value = "The name of the acting user")
  public String getActingUserName() {
    return actingUserName;
  }

  public void setActingUserName(String actingUserName) {
    this.actingUserName = actingUserName;
  }

  public LibraryDocumentEvent actingUserIpAddress(String actingUserIpAddress) {
    this.actingUserIpAddress = actingUserIpAddress;
    return this;
  }

   /**
   * The IP address of the user that created the event
   * @return actingUserIpAddress
  **/
  @ApiModelProperty(value = "The IP address of the user that created the event")
  public String getActingUserIpAddress() {
    return actingUserIpAddress;
  }

  public void setActingUserIpAddress(String actingUserIpAddress) {
    this.actingUserIpAddress = actingUserIpAddress;
  }

  public LibraryDocumentEvent participantEmail(String participantEmail) {
    this.participantEmail = participantEmail;
    return this;
  }

   /**
   * Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
   * @return participantEmail
  **/
  @ApiModelProperty(value = "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to")
  public String getParticipantEmail() {
    return participantEmail;
  }

  public void setParticipantEmail(String participantEmail) {
    this.participantEmail = participantEmail;
  }

  public LibraryDocumentEvent type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * Type of library document event
   * @return type
  **/
  @ApiModelProperty(value = "Type of library document event")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public LibraryDocumentEvent participantRole(ParticipantRoleEnum participantRole) {
    this.participantRole = participantRole;
    return this;
  }

   /**
   * Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).
   * @return participantRole
  **/
  @ApiModelProperty(value = "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).")
  public ParticipantRoleEnum getParticipantRole() {
    return participantRole;
  }

  public void setParticipantRole(ParticipantRoleEnum participantRole) {
    this.participantRole = participantRole;
  }

  public LibraryDocumentEvent vaultEventId(String vaultEventId) {
    this.vaultEventId = vaultEventId;
    return this;
  }

   /**
   * The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)
   * @return vaultEventId
  **/
  @ApiModelProperty(value = "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)")
  public String getVaultEventId() {
    return vaultEventId;
  }

  public void setVaultEventId(String vaultEventId) {
    this.vaultEventId = vaultEventId;
  }

  public LibraryDocumentEvent participantId(String participantId) {
    this.participantId = participantId;
    return this;
  }

   /**
   * The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to
   * @return participantId
  **/
  @ApiModelProperty(value = "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to")
  public String getParticipantId() {
    return participantId;
  }

  public void setParticipantId(String participantId) {
    this.participantId = participantId;
  }

  public LibraryDocumentEvent versionId(String versionId) {
    this.versionId = versionId;
    return this;
  }

   /**
   * An ID which uniquely identifies the version of the document associated with this audit event
   * @return versionId
  **/
  @ApiModelProperty(value = "An ID which uniquely identifies the version of the document associated with this audit event")
  public String getVersionId() {
    return versionId;
  }

  public void setVersionId(String versionId) {
    this.versionId = versionId;
  }

  public LibraryDocumentEvent actingUserEmail(String actingUserEmail) {
    this.actingUserEmail = actingUserEmail;
    return this;
  }

   /**
   * Email address of the user that created the event
   * @return actingUserEmail
  **/
  @ApiModelProperty(value = "Email address of the user that created the event")
  public String getActingUserEmail() {
    return actingUserEmail;
  }

  public void setActingUserEmail(String actingUserEmail) {
    this.actingUserEmail = actingUserEmail;
  }

  public LibraryDocumentEvent devicePhoneNumber(String devicePhoneNumber) {
    this.devicePhoneNumber = devicePhoneNumber;
    return this;
  }

   /**
   * Phone number from the device used when the participation is completed on a mobile phone
   * @return devicePhoneNumber
  **/
  @ApiModelProperty(value = "Phone number from the device used when the participation is completed on a mobile phone")
  public String getDevicePhoneNumber() {
    return devicePhoneNumber;
  }

  public void setDevicePhoneNumber(String devicePhoneNumber) {
    this.devicePhoneNumber = devicePhoneNumber;
  }

  public LibraryDocumentEvent initiatingUserEmail(String initiatingUserEmail) {
    this.initiatingUserEmail = initiatingUserEmail;
    return this;
  }

   /**
   * Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect
   * @return initiatingUserEmail
  **/
  @ApiModelProperty(value = "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect")
  public String getInitiatingUserEmail() {
    return initiatingUserEmail;
  }

  public void setInitiatingUserEmail(String initiatingUserEmail) {
    this.initiatingUserEmail = initiatingUserEmail;
  }

  public LibraryDocumentEvent digitalSignatureInfo(DigitalSignatureInfo digitalSignatureInfo) {
    this.digitalSignatureInfo = digitalSignatureInfo;
    return this;
  }

   /**
   * This is present for ESIGNED events when the participation is signed digitally
   * @return digitalSignatureInfo
  **/
  @ApiModelProperty(value = "This is present for ESIGNED events when the participation is signed digitally")
  public DigitalSignatureInfo getDigitalSignatureInfo() {
    return digitalSignatureInfo;
  }

  public void setDigitalSignatureInfo(DigitalSignatureInfo digitalSignatureInfo) {
    this.digitalSignatureInfo = digitalSignatureInfo;
  }

  public LibraryDocumentEvent vaultProviderName(String vaultProviderName) {
    this.vaultProviderName = vaultProviderName;
    return this;
  }

   /**
   * Name of the vault provider for the vault event (if vaulted, otherwise null)
   * @return vaultProviderName
  **/
  @ApiModelProperty(value = "Name of the vault provider for the vault event (if vaulted, otherwise null)")
  public String getVaultProviderName() {
    return vaultProviderName;
  }

  public void setVaultProviderName(String vaultProviderName) {
    this.vaultProviderName = vaultProviderName;
  }

  public LibraryDocumentEvent comment(String comment) {
    this.comment = comment;
    return this;
  }

   /**
   * The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant
   * @return comment
  **/
  @ApiModelProperty(value = "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant")
  public String getComment() {
    return comment;
  }

  public void setComment(String comment) {
    this.comment = comment;
  }

  public LibraryDocumentEvent id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The identifier for the event.
   * @return id
  **/
  @ApiModelProperty(value = "The identifier for the event.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public LibraryDocumentEvent synchronizationId(String synchronizationId) {
    this.synchronizationId = synchronizationId;
    return this;
  }

   /**
   * A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)
   * @return synchronizationId
  **/
  @ApiModelProperty(value = "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)")
  public String getSynchronizationId() {
    return synchronizationId;
  }

  public void setSynchronizationId(String synchronizationId) {
    this.synchronizationId = synchronizationId;
  }

  public LibraryDocumentEvent deviceLocation(LibDocEventDeviceLocation deviceLocation) {
    this.deviceLocation = deviceLocation;
    return this;
  }

   /**
   * Location of the device that generated the event (This value may be null due to limited privileges)
   * @return deviceLocation
  **/
  @ApiModelProperty(value = "Location of the device that generated the event (This value may be null due to limited privileges)")
  public LibDocEventDeviceLocation getDeviceLocation() {
    return deviceLocation;
  }

  public void setDeviceLocation(LibDocEventDeviceLocation deviceLocation) {
    this.deviceLocation = deviceLocation;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LibraryDocumentEvent libraryDocumentEvent = (LibraryDocumentEvent) o;
    return Objects.equals(this.date, libraryDocumentEvent.date) &&
        Objects.equals(this.initiatingUserName, libraryDocumentEvent.initiatingUserName) &&
        Objects.equals(this.description, libraryDocumentEvent.description) &&
        Objects.equals(this.actingUserName, libraryDocumentEvent.actingUserName) &&
        Objects.equals(this.actingUserIpAddress, libraryDocumentEvent.actingUserIpAddress) &&
        Objects.equals(this.participantEmail, libraryDocumentEvent.participantEmail) &&
        Objects.equals(this.type, libraryDocumentEvent.type) &&
        Objects.equals(this.participantRole, libraryDocumentEvent.participantRole) &&
        Objects.equals(this.vaultEventId, libraryDocumentEvent.vaultEventId) &&
        Objects.equals(this.participantId, libraryDocumentEvent.participantId) &&
        Objects.equals(this.versionId, libraryDocumentEvent.versionId) &&
        Objects.equals(this.actingUserEmail, libraryDocumentEvent.actingUserEmail) &&
        Objects.equals(this.devicePhoneNumber, libraryDocumentEvent.devicePhoneNumber) &&
        Objects.equals(this.initiatingUserEmail, libraryDocumentEvent.initiatingUserEmail) &&
        Objects.equals(this.digitalSignatureInfo, libraryDocumentEvent.digitalSignatureInfo) &&
        Objects.equals(this.vaultProviderName, libraryDocumentEvent.vaultProviderName) &&
        Objects.equals(this.comment, libraryDocumentEvent.comment) &&
        Objects.equals(this.id, libraryDocumentEvent.id) &&
        Objects.equals(this.synchronizationId, libraryDocumentEvent.synchronizationId) &&
        Objects.equals(this.deviceLocation, libraryDocumentEvent.deviceLocation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, initiatingUserName, description, actingUserName, actingUserIpAddress, participantEmail, type, participantRole, vaultEventId, participantId, versionId, actingUserEmail, devicePhoneNumber, initiatingUserEmail, digitalSignatureInfo, vaultProviderName, comment, id, synchronizationId, deviceLocation);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LibraryDocumentEvent {\n");
    
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    initiatingUserName: ").append(toIndentedString(initiatingUserName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    actingUserName: ").append(toIndentedString(actingUserName)).append("\n");
    sb.append("    actingUserIpAddress: ").append(toIndentedString(actingUserIpAddress)).append("\n");
    sb.append("    participantEmail: ").append(toIndentedString(participantEmail)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    participantRole: ").append(toIndentedString(participantRole)).append("\n");
    sb.append("    vaultEventId: ").append(toIndentedString(vaultEventId)).append("\n");
    sb.append("    participantId: ").append(toIndentedString(participantId)).append("\n");
    sb.append("    versionId: ").append(toIndentedString(versionId)).append("\n");
    sb.append("    actingUserEmail: ").append(toIndentedString(actingUserEmail)).append("\n");
    sb.append("    devicePhoneNumber: ").append(toIndentedString(devicePhoneNumber)).append("\n");
    sb.append("    initiatingUserEmail: ").append(toIndentedString(initiatingUserEmail)).append("\n");
    sb.append("    digitalSignatureInfo: ").append(toIndentedString(digitalSignatureInfo)).append("\n");
    sb.append("    vaultProviderName: ").append(toIndentedString(vaultProviderName)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    synchronizationId: ").append(toIndentedString(synchronizationId)).append("\n");
    sb.append("    deviceLocation: ").append(toIndentedString(deviceLocation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

